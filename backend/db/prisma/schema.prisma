// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    userID               String          @id @default(uuid())
    username             String          @unique
    hash                 String
    country              String
    memberDate           DateTime        @default(now())
    status               UserStatus
    profilePicURL        String          @default("")
    email                String          @unique
    seller               Seller?
    reviews              Review[]
    orders               Order[]
    foundHelpful         HelpfulReview[]
    balance              Decimal         @default(0) @db.Decimal(12, 2)
    sentMessages         Message[]
    messageGroups        GroupMember[]
    createdGroups        MessageGroup[]
    savedPosts           SavedPost[]
    savedSellers         SavedSeller[]
    socketID             String?
    orderRequests        OrderRequest[]
    unreadMessages       Int             @default(0)
    notificationSettings Json
    notifications        Notification[]
    unreadNotifications  Int             @default(0)
}

model Notification {
    notificationID String   @id @default(uuid())
    user           User     @relation(fields: [userID], references: [userID], onDelete: Cascade)
    userID         String
    title          String
    text           String
    createdAt      DateTime @default(now())
    unread         Boolean  @default(true)
    navigateTo     String?
    xp             Int      @default(0)
}

model MessageGroup {
    groupID   String        @id @default(uuid())
    groupName String
    messages  Message[]
    members   GroupMember[]
    post      Post          @relation(fields: [postID], references: [postID], onDelete: Cascade)
    postID    String
    creator   User          @relation(fields: [creatorID], references: [userID], onDelete: Cascade)
    creatorID String
    createdAt DateTime      @default(now())

    @@unique([postID, creatorID])
}

model GroupMember {
    group          MessageGroup @relation(fields: [groupID], references: [groupID], onDelete: Cascade)
    groupID        String
    user           User         @relation(fields: [userID], references: [userID], onDelete: Cascade)
    userID         String
    unreadMessages Int          @default(0)

    @@id([groupID, userID])
}

model Message {
    messageID    String        @id @default(uuid())
    from         User          @relation(fields: [fromID], references: [userID], onDelete: Cascade)
    fromID       String
    group        MessageGroup  @relation(fields: [groupID], references: [groupID], onDelete: Cascade)
    groupID      String
    messageText  String
    createdAt    DateTime      @default(now())
    files        MessageFile[]
    orderRequest OrderRequest?
}

model OrderRequest {
    id          String             @id @default(uuid())
    message     Message            @relation(fields: [messageID], references: [messageID], onDelete: Cascade)
    messageID   String             @unique
    user        User               @relation(fields: [userID], references: [userID], onDelete: Cascade)
    userID      String
    seller      Seller             @relation(fields: [sellerID], references: [sellerID], onDelete: Cascade)
    sellerID    String
    package     Package            @relation(fields: [packageID], references: [packageID], onDelete: Cascade)
    packageID   String
    status      OrderRequestStatus
    actionTaken DateTime           @default(now())
    expires     DateTime
    subTotal    Decimal            @db.Decimal(12, 2)
    total       Decimal            @db.Decimal(12, 2)
}

model MessageFile {
    message   Message @relation(fields: [messageID], references: [messageID], onDelete: Cascade)
    messageID String
    url       String
    name      String
    fileType  String
    fileSize  Int

    @@id([messageID, url])
}

model HelpfulReview {
    user     User   @relation(fields: [userID], references: [userID], onDelete: Cascade)
    userID   String
    review   Review @relation(fields: [reviewID], references: [reviewID], onDelete: Cascade)
    reviewID String

    @@id([userID, reviewID])
}

model Seller {
    sellerID             String         @id @default(uuid())
    user                 User           @relation(fields: [userID], references: [userID], onDelete: Cascade)
    userID               String         @unique
    rating               Float
    orders               Order[]
    posts                Post[]
    description          String
    summary              String
    languages            String[]       @default(["english"])
    skills               String[]       @default([])
    sellerLevel          SellerLevel    @relation(fields: [sellerLevelID], references: [id])
    sellerLevelID        String
    sellerXP             Int            @default(0)
    reviews              Review[]
    savedSellers         SavedSeller[]
    orderRequests        OrderRequest[]
    hadFirstOrderRequest Boolean        @default(false)
}

model SellerLevel {
    id          String       @id @default(uuid())
    xpRequired  Int
    name        String
    sellers     Seller[]
    nextLevelID String?      @unique
    nextLevel   SellerLevel? @relation("LevelHistory", fields: [nextLevelID], references: [id])
    prevLevel   SellerLevel? @relation("LevelHistory")
    postLimit   Int          @default(0)
}

model Post {
    postID        String         @id @default(uuid())
    postedBy      Seller         @relation(fields: [sellerID], references: [sellerID], onDelete: Cascade)
    sellerID      String
    about         String
    createdAt     DateTime       @default(now())
    title         String
    startingPrice Decimal        @db.Decimal(12, 2)
    reviews       Review[]
    packages      Package[]
    images        PostImage[]    @relation("Images")
    workType      WorkType       @relation(fields: [workTypeID], references: [id], onDelete: Cascade)
    workTypeID    String
    messageGroups MessageGroup[]
    savedPosts    SavedPost[]
    hidden        Boolean        @default(false)
}

model JobCategory {
    id        String     @id @default(uuid())
    name      String     @unique
    workTypes WorkType[]
}

model WorkType {
    id            String      @id @default(uuid())
    name          String      @unique
    jobCategory   JobCategory @relation(fields: [jobCategoryID], references: [id], onDelete: Cascade)
    jobCategoryID String
    posts         Post[]
}

model PostImage {
    post         Post     @relation("Images", fields: [postID], references: [postID], onDelete: Cascade)
    postID       String
    url          String
    createdAt    DateTime @default(now())
    cloudinaryID String   @unique

    @@id([postID, url])
}

model Package {
    packageID     String         @id @default(uuid())
    post          Post           @relation(fields: [postID], references: [postID], onDelete: Cascade)
    postID        String
    deliveryTime  Int
    revisions     String
    description   String
    type          PackageType
    features      String[]
    amount        Decimal        @db.Decimal(12, 2)
    numOrders     Int            @default(0)
    title         String
    orderRequests OrderRequest[]
    orders        Order[]

    @@unique([postID, type])
}

model Review {
    reviewID            String          @id @default(uuid())
    reviewer            User            @relation(fields: [reviewerID], references: [userID], onDelete: Cascade)
    reviewerID          String
    seller              Seller          @relation(fields: [sellerID], references: [sellerID], onDelete: Cascade)
    sellerID            String
    reviewBody          String
    createdAt           DateTime        @default(now())
    rating              Float
    serviceAsDescribed  Float
    sellerCommunication Float
    serviceDelivery     Float
    Post                Post            @relation(fields: [postID], references: [postID], onDelete: Cascade)
    postID              String
    foundHelpful        HelpfulReview[]
    isOldReview         Boolean         @default(false)
}

model Order {
    orderID         String      @id @default(uuid())
    client          User        @relation(fields: [clientID], references: [userID])
    clientID        String
    seller          Seller      @relation(fields: [sellerID], references: [sellerID])
    sellerID        String
    package         Package     @relation(fields: [packageID], references: [packageID])
    packageID       String
    createdAt       DateTime    @default(now())
    status          OrderStatus
    subTotal        Decimal     @db.Decimal(12, 2)
    total           Decimal     @db.Decimal(12, 2)
    deliveryEndDate DateTime
}

model SavedSeller {
    seller   Seller @relation(fields: [sellerID], references: [sellerID], onDelete: Cascade)
    sellerID String
    user     User   @relation(fields: [userID], references: [userID], onDelete: Cascade)
    userID   String

    @@id([userID, sellerID])
}

model SavedPost {
    post   Post   @relation(fields: [postID], references: [postID], onDelete: Cascade)
    postID String
    user   User   @relation(fields: [userID], references: [userID], onDelete: Cascade)
    userID String

    @@id([userID, postID])
}

enum UserStatus {
    ONLINE
    OFFLINE
    AWAY
    BUSY
}

enum OrderStatus {
    COMPLETED
    PENDING
    CANCELLED
}

enum PackageType {
    BASIC
    STANDARD
    SUPERIOR
}

enum OrderRequestStatus {
    PENDING
    DECLINED
    CANCELLED
    ACCEPTED
}
