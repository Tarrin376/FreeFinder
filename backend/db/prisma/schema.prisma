// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    userID        String          @id @default(uuid())
    username      String          @unique
    hash          String
    country       String
    memberDate    DateTime        @default(now())
    status        UserStatus
    profilePicURL String          @default("")
    email         String          @unique
    seller        Seller?
    savedPosts    SavedPost[]
    savedSellers  SavedSeller[]
    reviews       Review[]
    orders        Order[]
    foundHelpful  HelpfulReview[]
}

model SavedSeller {
    seller   Seller @relation(fields: [sellerID], references: [sellerID], onDelete: Cascade)
    sellerID String
    user     User   @relation(fields: [userID], references: [userID], onDelete: Cascade)
    userID   String

    @@id([userID, sellerID])
}

model HelpfulReview {
    user     User   @relation(fields: [userID], references: [userID], onDelete: Cascade)
    userID   String
    review   Review @relation(fields: [reviewID], references: [reviewID], onDelete: Cascade)
    reviewID String

    @@id([userID, reviewID])
}

model Seller {
    sellerID      String        @id @default(uuid())
    user          User          @relation(fields: [userID], references: [userID], onDelete: Cascade)
    userID        String        @unique
    rating        Float
    orders        Order[]
    posts         Post[]
    description   String
    summary       String
    languages     String[]      @default(["english"])
    skills        String[]      @default([])
    sellerLevel   SellerLevel   @relation(fields: [sellerLevelID], references: [id])
    sellerLevelID String
    sellerXP      Int           @default(0)
    savedSellers  SavedSeller[]
}

model SellerLevel {
    id          String       @id @default(uuid())
    xpRequired  Int
    name        String
    sellers     Seller[]
    nextLevelID String?      @unique
    nextLevel   SellerLevel? @relation("LevelHistory", fields: [nextLevelID], references: [id])
    prevLevel   SellerLevel? @relation("LevelHistory")
    postLimit   Int          @default(0)
}

model SavedPost {
    post   Post   @relation(fields: [postID], references: [postID], onDelete: Cascade)
    postID String
    user   User   @relation(fields: [userID], references: [userID], onDelete: Cascade)
    userID String

    @@id([userID, postID])
}

model Post {
    postID        String      @id @default(uuid())
    savedPosts    SavedPost[]
    orders        Order[]
    postedBy      Seller      @relation(fields: [sellerID], references: [sellerID], onDelete: Cascade)
    sellerID      String
    about         String
    createdAt     DateTime    @default(now())
    title         String
    startingPrice Decimal     @db.Money
    reviews       Review[]
    packages      Package[]
    images        PostImage[] @relation("Images")
    workType      WorkType    @relation(fields: [workTypeID], references: [id], onDelete: Cascade)
    workTypeID    String
}

model JobCategory {
    id        String     @id @default(uuid())
    name      String     @unique
    workTypes WorkType[]
}

model WorkType {
    id            String      @id @default(uuid())
    name          String      @unique
    jobCategory   JobCategory @relation(fields: [jobCategoryID], references: [id], onDelete: Cascade)
    jobCategoryID String
    posts         Post[]
}

model PostImage {
    post         Post     @relation("Images", fields: [postID], references: [postID], onDelete: Cascade)
    postID       String
    url          String
    createdAt    DateTime @default(now())
    cloudinaryID String   @unique

    @@id([postID, url])
}

model Package {
    post         Post        @relation(fields: [postID], references: [postID], onDelete: Cascade)
    postID       String
    deliveryTime Int
    revisions    String
    description  String
    type         PackageType
    features     String[]
    amount       Decimal     @db.Money
    numOrders    Int         @default(0)
    title        String

    @@id([postID, type])
}

model Review {
    reviewID            String          @id @default(uuid())
    reviewer            User            @relation(fields: [reviewerID], references: [userID], onDelete: Cascade)
    reviewerID          String
    reviewBody          String
    createdAt           DateTime        @default(now())
    rating              Float
    serviceAsDescribed  Float
    sellerCommunication Float
    serviceDelivery     Float
    Post                Post            @relation(fields: [postID], references: [postID], onDelete: Cascade)
    postID              String
    foundHelpful        HelpfulReview[]
}

model Order {
    orderID     String      @id @default(uuid())
    customer    User        @relation(fields: [customerID], references: [userID])
    customerID  String
    seller      Seller      @relation(fields: [sellerID], references: [sellerID])
    sellerID    String
    post        Post        @relation(fields: [postID], references: [postID])
    postID      String
    createdAt   DateTime    @default(now())
    orderAmount Decimal     @db.Money
    status      OrderStatus
}

enum UserStatus {
    ONLINE
    OFFLINE
    AWAY
}

enum OrderStatus {
    COMPLETED
    PENDING
    CANCELLED
}

enum PackageType {
    BASIC
    STANDARD
    SUPERIOR
}
